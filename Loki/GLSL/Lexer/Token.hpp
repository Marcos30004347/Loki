// https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.50.pdf

#ifndef GLSL_TOKEN_H
#define GLSL_TOKEN_H

namespace GLSL {

class Token {
public:
    enum Type {
        TOKEN_NONE,
        TOKEN_IDENTIFIER,

        // KEYWORDS
        TOKEN_ATTRIBUTE,
        TOKEN_CONST,
        TOKEN_UNIFORM,
        TOKEN_VARYING,
        TOKEN_BUFFER,
        TOKEN_SHARED,
        TOKEN_COHERENT,
        TOKEN_VOLATILE,
        TOKEN_RESTRICT,
        TOKEN_READONLY,
        TOKEN_WRITEONLY,
        TOKEN_ATOMIC_UINT,
        TOKEN_LAYOUT,
        TOKEN_CENTROID,
        TOKEN_FLAT,
        TOKEN_SMOOTH,
        TOKEN_NOPERSPECTIVE,
        TOKEN_PATCH,
        TOKEN_SAMPLE,
        TOKEN_BREAK,
        TOKEN_CONTINUE,
        TOKEN_DO,
        TOKEN_FOR,
        TOKEN_WHILE,
        TOKEN_SWITCH,
        TOKEN_CASE,
        TOKEN_DEFAULT,
        TOKEN_IF,
        TOKEN_ELSE,
        TOKEN_SUBROUTINE,
        TOKEN_IN,
        TOKEN_OUT,
        TOKEN_INOUT,

        TOKEN_FLOAT,
        TOKEN_TYPES_START = TOKEN_FLOAT,
        TOKEN_DOUBLE,
        TOKEN_INT,
        TOKEN_VOID,
        TOKEN_STRING,
        TOKEN_BOOL,
        TOKEN_TRUE,
        TOKEN_FALSE,
        TOKEN_INVARIANT,
        TOKEN_PRECISE,
        TOKEN_DISCARD,
        TOKEN_RETURN,
        TOKEN_MAT2,
        TOKEN_MAT3,
        TOKEN_MAT4,
        TOKEN_DMAT2,
        TOKEN_DMAT3,
        TOKEN_DMAT4,
        TOKEN_MAT2X2,
        TOKEN_MAT2X3,
        TOKEN_MAT2X4,
        TOKEN_DMAT2X2,
        TOKEN_DMAT2X3,
        TOKEN_DMAT2X4,
        TOKEN_MAT3X2,
        TOKEN_MAT3X3,
        TOKEN_MAT3X4,
        TOKEN_DMAT3X2,
        TOKEN_DMAT3X3,
        TOKEN_DMAT3X4,
        TOKEN_MAT4X2,
        TOKEN_MAT4X3,
        TOKEN_MAT4X4,
        TOKEN_DMAT4X2,
        TOKEN_DMAT4X3,
        TOKEN_DMAT4X4,
        TOKEN_VEC2,
        TOKEN_VEC3,
        TOKEN_VEC4,
        TOKEN_IVEC2,
        TOKEN_IVEC3,
        TOKEN_IVEC4,
        TOKEN_BVEC2,
        TOKEN_BVEC3,
        TOKEN_BVEC4,
        TOKEN_DVEC2,
        TOKEN_DVEC3,
        TOKEN_DVEC4,
        TOKEN_UINT,
        TOKEN_UVEC2,
        TOKEN_UVEC3,
        TOKEN_UVEC4,
        TOKEN_LOWP,
        TOKEN_MEDIUMP,
        TOKEN_HIGHP,
        TOKEN_PRECISION,
        TOKEN_SAMPLER1D,
        TOKEN_SAMPLER2D,
        TOKEN_SAMPLER3D,
        TOKEN_SAMPLERCUBE,
        TOKEN_SAMPLER1DSHADOW,
        TOKEN_SAMPLER2DSHADOW,
        TOKEN_SAMPLERCUBESHADOW,
        TOKEN_SAMPLER1DARRAY,
        TOKEN_SAMPLER2DARRAY,
        TOKEN_SAMPLER1DARRAYSHADOW,
        TOKEN_SAMPLER2DARRAYSHADOW,
        TOKEN_ISAMPLER1D,
        TOKEN_ISAMPLER2D,
        TOKEN_ISAMPLER3D,
        TOKEN_ISAMPLERCUBE,
        TOKEN_ISAMPLER1DARRAY,
        TOKEN_ISAMPLER2DARRAY,
        TOKEN_USAMPLER1D,
        TOKEN_USAMPLER2D,
        TOKEN_USAMPLER3D,
        TOKEN_USAMPLERCUBE,
        TOKEN_USAMPLER1DARRAY,
        TOKEN_USAMPLER2DARRAY,
        TOKEN_SAMPLER2DRECT,
        TOKEN_SAMPLER2DRECTSHADOW,
        TOKEN_ISAMPLER2DRECT,
        TOKEN_USAMPLER2DRECT,
        TOKEN_SAMPLERBUFFER,
        TOKEN_ISAMPLERBUFFER,
        TOKEN_USAMPLERBUFFER,
        TOKEN_SAMPLER2DMS,
        TOKEN_ISAMPLER2DMS,
        TOKEN_USAMPLER2DMS,
        TOKEN_SAMPLER2DMSARRAY,
        TOKEN_ISAMPLER2DMSARRAY,
        TOKEN_USAMPLER2DMSARRAY,
        TOKEN_SAMPLERCUBEARRAY,
        TOKEN_SAMPLERCUBEARRAYSHADOW,
        TOKEN_ISAMPLERCUBEARRAY,
        TOKEN_USAMPLERCUBEARRAY,
        TOKEN_IMAGE1D,
        TOKEN_IIMAGE1D,
        TOKEN_UIMAGE1D,
        TOKEN_IMAGE2D,
        TOKEN_IIMAGE2D,
        TOKEN_UIMAGE2D,
        TOKEN_IMAGE3D,
        TOKEN_IIMAGE3D,
        TOKEN_UIMAGE3D,
        TOKEN_IMAGE2DRECT,
        TOKEN_IIMAGE2DRECT,
        TOKEN_UIMAGE2DRECT,
        TOKEN_IMAGECUBE,
        TOKEN_IIMAGECUBE,
        TOKEN_UIMAGECUBE,
        TOKEN_IMAGEBUFFER,
        TOKEN_IIMAGEBUFFER,
        TOKEN_UIMAGEBUFFER,
        TOKEN_IMAGE1DARRAY,
        TOKEN_IIMAGE1DARRAY,
        TOKEN_UIMAGE1DARRAY,
        TOKEN_IMAGE2DARRAY,
        TOKEN_IIMAGE2DARRAY,
        TOKEN_UIMAGE2DARRAY,
        TOKEN_IMAGECUBEARRAY,
        TOKEN_IIMAGECUBEARRAY,
        TOKEN_UIMAGECUBEARRAY,
        TOKEN_IMAGE2DMS,
        TOKEN_IIMAGE2DMS,
        TOKEN_UIMAGE2DMS,
        TOKEN_IMAGE2DMSARRAY,
        TOKEN_IIMAGE2DMSARRAY,
        TOKEN_UIMAGE2DMSARRAY,
        TOKEN_TYPES_END = TOKEN_UIMAGE2DMSARRAY,

        TOKEN_STRUCT,


        //SYMBOLS   
        TOKEN_INTERROGATION,
        TOKEN_TIL_EQUAL,
        TOKEN_TIL,
        TOKEN_PERCENT_EQUAL,
        TOKEN_PERCENT,
        TOKEN_AMPERSAND_EQUAL,
        TOKEN_APERSAND_AMPERSAND,
        TOKEN_AMPERSAND,
        TOKEN_PIPE_EQUAL,
        TOKEN_PIPE_PIPE,
        TOKEN_PIPE,
        TOKEN_TIMES_EQUAL,
        TOKEN_ASTERISK,
        TOKEN_HAT_EQUAL,
        TOKEN_HAT,
        TOKEN_DIVIDE_EQUAL,
        TOKEN_SLASH,
        TOKEN_NOT_EQUAL,
        TOKEN_EXCLAMATION,
        TOKEN_MINUS_MINUS,
        TOKEN_MINUS_EQUAL,
        TOKEN_MINUS,
        TOKEN_PLUS_PLUS,
        TOKEN_PLUS_EQUAL,
        TOKEN_PLUS,
        TOKEN_EQUAL_EQUAL,
        TOKEN_EQUAL,
        TOKEN_POINT,
        TOKEN_COMMA,
        TOKEN_OPEN_PARENTESIS,
        TOKEN_CLOSE_PARENTESIS,
        TOKEN_OPEN_CURLY_BRACKETS,
        TOKEN_CLOSE_CURLY_BRACKETS,
        TOKEN_OPEN_SQUARE_BRACKETS,
        TOKEN_CLOSE_SQUARE_BRACKETS,
        TOKEN_TWO_POINTS,
        TOKEN_SEMICOLON,
        TOKEN_GREATER_GREATER_EQUAL,
        TOKEN_GREATER_GREATER,
        TOKEN_GREATER_OR_EQUAL,
        TOKEN_GREATER,
        TOKEN_LESS_LESS_EQUAL,
        TOKEN_LESS_LESS,
        TOKEN_LESS_OR_EQUAL,
        TOKEN_LESS,
        TOKEN_FLOAT_LITERAL,
        TOKEN_INT_LITERAL,
        TOKEN_STRING_LITERAL,
        TOKEN_EOF,
    };

    Type type;
    char* value;
    unsigned int line;
    Token(Token::Type type, char* value, unsigned int line);
    Token(Token::Type type, const char* value, unsigned int line);
};


}

#endif