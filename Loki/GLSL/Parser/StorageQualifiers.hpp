// GLSLangSpec.4.50.pdf 4.3

#include "AST.hpp"
#include "Parser.hpp"
#include "BaseType.hpp"

namespace GLSL {

enum StorageQualifiers {
    STORAGE_QUALIFIER_IN,
    INTERFACE_QUALIFIER_START = STORAGE_QUALIFIER_IN,
    STORAGE_QUALIFIER_PATH_IN,
    STORAGE_QUALIFIER_NONE = STORAGE_QUALIFIER_IN,
    STORAGE_QUALIFIER_CONST,
    STORAGE_QUALIFIER_INOUT,
    STORAGE_QUALIFIER_OUT,
    STORAGE_QUALIFIER_UNIFORM,
    STORAGE_QUALIFIER_PATCH_OUT,
    STORAGE_QUALIFIER_BUFFER,
    INTERFACE_QUALIFIER_END = STORAGE_QUALIFIER_PATCH_OUT,
    
    STORAGE_QUALIFIER_PATCH,
    STORAGE_QUALIFIER_SHARED,
    STORAGE_QUALIFIER_COHERENT,
    STORAGE_QUALIFIER_VOLATILE,
    STORAGE_QUALIFIER_RESTRICT,
    STORAGE_QUALIFIER_READONLY,
    STORAGE_QUALIFIER_ATTRIBUTE,
    STORAGE_QUALIFIER_VARYING,
    STORAGE_QUALIFIER_WRITEONLY,
    STORAGE_QUALIFIER_SUBROUTINE,
};

struct ASTStorageQualifiers : AST {
    explicit ASTStorageQualifiers();
    StorageQualifiers type;
    std::vector<BaseType*> type_name_list;
};

ASTStorageQualifiers* parseStorageQualifier(Parser* parser);

}