#ifndef AST_H
#define AST_H

namespace HLSL {

enum NodeType {
    NODE_TYPE_ROOT,
    NODE_TYPE_DATATYPE,
    NODE_TYPE_LITERAL,
    NODE_TYPE_VARIABLE_DECLARATION,
    NODE_TYPE_FUNCTION_DECLARATION,
    NODE_TYPE_BUFFER_DECLARATION,
    NODE_TYPE_STRUCT_DECLARATION,
    NODE_TYPE_STRUCT_FIELD,

    NODE_TYPE_BLOCK,

    NODE_TYPE_EXPRESSION_BINARY,
    NODE_TYPE_EXPRESSION_UNARY,

    NODE_TYPE_EXPRESSION_EQUALITY,
    NODE_TYPE_EXPRESSION_COMPARISON,
    NODE_TYPE_EXPRESSION_TERM,
    NODE_TYPE_EXPRESSION_UNARY,
    NODE_TYPE_EXPRESSION_FACTOR,

    NODE_TYPE_FUNCTION_CALL,
    NODE_TYPE_SYMBOL, // defined variables, ...
    NODE_TYPE_ASSIGNMENT,
    NODE_TYPE_MEMBER_ACCESS,
    NODE_TYPE_ARRAY_ACCESS,
    NODE_TYPE_TERNARY,

    NODE_TYPE_RETURN_STATEMENT,
    NODE_TYPE_DISCARD_STATEMENT,
    NODE_TYPE_BREAK_STATEMENT,
    NODE_TYPE_CONTINUE_STATEMENT,
    NODE_TYPE_IF_STATEMENT,
    NODE_TYPE_FOR_STATEMENT,
    NODE_TYPE_WHILE_STATEMENT,
    NODE_TYPE_DO_WHILE_STATEMENT,
    NODE_TYPE_SWITCH_STATEMENT,
    NODE_TYPE_CASE_STATEMENT,
    NODE_TYPE_DEFAULT_STATEMENT,

    // NODE_TYPE_STRUCT_FIELD,
    // NODE_TYPE_BUFFER_FIELD,
    // NODE_TYPE_FUNCTION,
    // NODE_TYPE_ARGUMENT,
    // NODE_TYPE_EXPRESSION_STATEMENT,
    // NODE_TYPE_EXPRESSION,
    // NODE_TYPE_UNARY_EXPRESSION,
    // NODE_TYPE_BINARY_EXPRESSION,
    // NODE_TYPE_CONDITIONAL_EXPRESSION,
    // NODE_TYPE_CASTING_EXPRESSION,
    // NODE_TYPE_LITERAL_EXPRESSION,
    // NODE_TYPE_IDENTIFIER_EXPRESSION,
    // NODE_TYPE_CONSTRUCTOR_EXPRESSION,
    // NODE_TYPE_MEMBER_ACCESS,
    // NODE_TYPE_ARRAY_ACCESS,
    // NODE_TYPE_FUNCTION_CALL,
};




struct AST {
    NodeType ast_type;
    explicit AST(NodeType type): ast_type{type} {}
};


}

#endif