namespace HLSL {

enum NodeType {
    NODE_TYPE_ROOT,
    NODE_TYPE_DATATYPE,
    NODE_TYPE_VARIABLE_DECLARATION,
    // NODE_TYPE_STRUCT,
    // NODE_TYPE_STRUCT_FIELD,
    // NODE_TYPE_BUFFER,
    // NODE_TYPE_BUFFER_FIELD,
    // NODE_TYPE_FUNCTION,
    // NODE_TYPE_ARGUMENT,
    // NODE_TYPE_EXPRESSION_STATEMENT,
    // NODE_TYPE_EXPRESSION,
    // NODE_TYPE_RETURN_STATEMENT,
    // NODE_TYPE_DISCARD_STATEMENT,
    // NODE_TYPE_BREAK_STATEMENT,
    // NODE_TYPE_CONTINUE_STATEMENT,
    // NODE_TYPE_IF_STATEMENT,
    // NODE_TYPE_FOR_STATEMENT,
    // NODE_TYPE_UNARY_EXPRESSION,
    // NODE_TYPE_BINARY_EXPRESSION,
    // NODE_TYPE_CONDITIONAL_EXPRESSION,
    // NODE_TYPE_CASTING_EXPRESSION,
    // NODE_TYPE_LITERAL_EXPRESSION,
    // NODE_TYPE_IDENTIFIER_EXPRESSION,
    // NODE_TYPE_CONSTRUCTOR_EXPRESSION,
    // NODE_TYPE_MEMBER_ACCESS,
    // NODE_TYPE_ARRAY_ACCESS,
    // NODE_TYPE_FUNCTION_CALL,
};

enum BinaryOp {
    BINARY_OP_AND,
    BINARY_OP_OR,
    BINARY_OP_ADD,
    BINARY_OP_SUB,
    BINARY_OP_MUL,
    BINARY_OP_DIV,
    BINARY_OP_LESS,
    BINARY_OP_GREATER,
    BINARY_OP_LESS_OR_EQUAL,
    BINARY_OP_GREATER_OR_EQUAL,
    BINARY_OP_EQUAL,
    BINARY_OP_NOT_EQUAL,
    BINARY_OP_ASSIGN,
    BINARY_OP_ADD_ASSIGN,
    BINARY_OP_SUB_ASSIGN,
    BINARY_OP_MUL_ASSIGN,
    BINARY_OP_DIB_ASSIGN,
};

enum UnaryOp {
    UNARY_OP_NEGATIVE,       // -x
    UNARY_OP_POSITIVE,       // +x
    UNARY_OP_NOT,            // !x
    UNARY_OP_PRE_INCREMENT,   // ++x
    UNARY_OP_PRE_DECREMENT,   // --x
    UNARY_OP_POST_INCREMENT,  // x++
    UNARY_OP_POST_DECREMENT,  // x++
};

enum ArgumentModifier {
    ARGUMENT_MODIFIER_NONE,
    ARGUMENT_MODIFIER_IN,
    ARGUMENT_MODIFIER_INOUT,
    ARGUMENT_MODIFIER_UNIFORM,
};


struct AST {
    NodeType ast_type;
    explicit AST(NodeType type): ast_type{type} {}
};


}