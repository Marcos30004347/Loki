// https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dX-graphics-hlsl-data-types
#ifndef BASE_TYPE_H
#define BASE_TYPE_H

#include "Parser.hpp"

namespace HLSL {

struct BaseType {
    enum Type {
        BASE_TYPE_UNKNOWN,
        BASE_TYPE_VOID,   
    
        // SCALARS
        BASE_TYPE_FLOAT,
        BASE_TYPE_SCALARS_START = BASE_TYPE_FLOAT,
        BASE_TYPE_HALF,
        BASE_TYPE_INT,
        BASE_TYPE_UINT,
        BASE_TYPE_BOOL,
        BASE_TYPE_SCALARS_END = BASE_TYPE_BOOL,
    
        BASE_TYPE_FLOAT2,
        BASE_TYPE_SCALARS2_START = BASE_TYPE_FLOAT2,
        BASE_TYPE_HALF2,
        BASE_TYPE_INT2,
        BASE_TYPE_UINT2,
        BASE_TYPE_SCALARS2_END = BASE_TYPE_HALF2,
    
        BASE_TYPE_FLOAT3,
        BASE_TYPE_SCALARS3_START = BASE_TYPE_FLOAT3,
        BASE_TYPE_HALF3,
        BASE_TYPE_INT3,
        BASE_TYPE_UINT3,
        BASE_TYPE_SCALARS3_END = BASE_TYPE_HALF3,
    
        BASE_TYPE_FLOAT4,
        BASE_TYPE_SCALARS4_START = BASE_TYPE_FLOAT4,
        BASE_TYPE_HALF4,
        BASE_TYPE_INT4,
        BASE_TYPE_UINT4,
        BASE_TYPE_SCALARS4_END = BASE_TYPE_HALF4,
    
        BASE_TYPE_FLOAT1X1,
        BASE_TYPE_MATRICES1X1_START = BASE_TYPE_FLOAT1X1,
        BASE_TYPE_HALF1X1,
        BASE_TYPE_INT1X1,
        BASE_TYPE_UINT1X1,
        BASE_TYPE_MATRICES1X1_END = BASE_TYPE_UINT1X1,

    
        BASE_TYPE_FLOAT2X1,
        BASE_TYPE_MATRICES2X1_START = BASE_TYPE_FLOAT2X1,
        BASE_TYPE_HALF2X1,
        BASE_TYPE_INT2X1,
        BASE_TYPE_UINT2X1,
        BASE_TYPE_MATRICES2X1_END = BASE_TYPE_UINT2X1,


        BASE_TYPE_FLOAT3X1,
        BASE_TYPE_MATRICES3X1_START = BASE_TYPE_FLOAT3X1,
        BASE_TYPE_HALF3X1,
        BASE_TYPE_INT3X1,
        BASE_TYPE_UINT3X1,
        BASE_TYPE_MATRICES3X1_END = BASE_TYPE_UINT3X1,

        BASE_TYPE_FLOAT4X1,
        BASE_TYPE_MATRICES4X1_START = BASE_TYPE_FLOAT4X1,
        BASE_TYPE_HALF4X1,
        BASE_TYPE_INT4X1,
        BASE_TYPE_UINT4X1,
        BASE_TYPE_MATRICES4X1_END = BASE_TYPE_UINT4X1,

        BASE_TYPE_FLOAT1X2,
        BASE_TYPE_MATRICES1X2_START = BASE_TYPE_FLOAT1X2,
        BASE_TYPE_HALF1X2,
        BASE_TYPE_INT1X2,
        BASE_TYPE_UINT1X2,
        BASE_TYPE_MATRICES1X2_END = BASE_TYPE_UINT1X2,

    
        BASE_TYPE_FLOAT2X2,
        BASE_TYPE_MATRICES2X2_START = BASE_TYPE_FLOAT2X2,
        BASE_TYPE_HALF2X2,
        BASE_TYPE_INT2X2,
        BASE_TYPE_UINT2X2,
        BASE_TYPE_MATRICES2X2_END = BASE_TYPE_UINT2X2,


        BASE_TYPE_FLOAT3X2,
        BASE_TYPE_MATRICES3X2_START = BASE_TYPE_FLOAT3X2,
        BASE_TYPE_HALF3X2,
        BASE_TYPE_INT3X2,
        BASE_TYPE_UINT3X2,
        BASE_TYPE_MATRICES3X2_END = BASE_TYPE_UINT3X2,

        BASE_TYPE_FLOAT4X2,
        BASE_TYPE_MATRICES4X2_START = BASE_TYPE_FLOAT4X2,
        BASE_TYPE_HALF4X2,
        BASE_TYPE_INT4X2,
        BASE_TYPE_UINT4X2,
        BASE_TYPE_MATRICES4X2_END = BASE_TYPE_UINT4X2,


        BASE_TYPE_FLOAT1X3,
        BASE_TYPE_MATRICES1X3_START = BASE_TYPE_FLOAT1X3,
        BASE_TYPE_HALF1X3,
        BASE_TYPE_INT1X3,
        BASE_TYPE_UINT1X3,
        BASE_TYPE_MATRICES1X3_END = BASE_TYPE_UINT1X3,

    
        BASE_TYPE_FLOAT2X3,
        BASE_TYPE_MATRICES2X3_START = BASE_TYPE_FLOAT2X3,
        BASE_TYPE_HALF2X3,
        BASE_TYPE_INT2X3,
        BASE_TYPE_UINT2X3,
        BASE_TYPE_MATRICES2X3_END = BASE_TYPE_UINT2X3,


        BASE_TYPE_FLOAT3X3,
        BASE_TYPE_MATRICES3X3_START = BASE_TYPE_FLOAT3X3,
        BASE_TYPE_HALF3X3,
        BASE_TYPE_INT3X3,
        BASE_TYPE_UINT3X3,
        BASE_TYPE_MATRICES3X3_END = BASE_TYPE_UINT3X3,

        BASE_TYPE_FLOAT4X3,
        BASE_TYPE_MATRICES4X3_START = BASE_TYPE_FLOAT4X3,
        BASE_TYPE_HALF4X3,
        BASE_TYPE_INT4X3,
        BASE_TYPE_UINT4X3,
        BASE_TYPE_MATRICES4X3_END = BASE_TYPE_UINT4X3,


        BASE_TYPE_FLOAT1X4,
        BASE_TYPE_MATRICES1X4_START = BASE_TYPE_FLOAT1X4,
        BASE_TYPE_HALF1X4,
        BASE_TYPE_INT1X4,
        BASE_TYPE_UINT1X4,
        BASE_TYPE_MATRICES1X4_END = BASE_TYPE_UINT1X4,

    
        BASE_TYPE_FLOAT2X4,
        BASE_TYPE_MATRICES2X4_START = BASE_TYPE_FLOAT2X4,
        BASE_TYPE_HALF2X4,
        BASE_TYPE_INT2X4,
        BASE_TYPE_UINT2X4,
        BASE_TYPE_MATRICES2X4_END = BASE_TYPE_UINT2X4,


        BASE_TYPE_FLOAT3X4,
        BASE_TYPE_MATRICES3X4_START = BASE_TYPE_FLOAT3X4,
        BASE_TYPE_HALF3X4,
        BASE_TYPE_INT3X4,
        BASE_TYPE_UINT3X4,
        BASE_TYPE_MATRICES3X4_END = BASE_TYPE_UINT3X4,

        BASE_TYPE_FLOAT4X4,
        BASE_TYPE_MATRICES4X4_START = BASE_TYPE_FLOAT4X4,
        BASE_TYPE_HALF4X4,
        BASE_TYPE_INT4X4,
        BASE_TYPE_UINT4X4,
        BASE_TYPE_MATRICES4X4_END = BASE_TYPE_UINT4X4,


        BASE_TYPE_TEXTURE,
        BASE_TYPE_SAMPLER2D,
        BASE_TYPE_SAMPLER_CUBE,

        BASE_TYPE_STRING,

        BASE_TYPE_USER_DEFINED,       // struct
    };

    char* name;
    Type type;

    bool is_matrix;
    bool is_vector;

    unsigned int rows;
    unsigned int cols;
    
};

BaseType* parseDeclarationBaseType(Parser* parser);
bool isDeclaration(Parser* parser);

}

#endif
